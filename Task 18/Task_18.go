package main

import (
	"fmt"
	"sync"
)

// Структура Counter представляет собой счетчик с методом для инкрементации
type Counter struct {
	mu    sync.Mutex // Мьютекс для защиты доступа к счетчику из разных горутин
	count int        // Значение счетчика
}

// Метод для инкрементации счетчика
func (c *Counter) Increment() {
	c.mu.Lock()         // Захватываем мьютекс перед изменением счетчика
	defer c.mu.Unlock() // Освобождаем мьютекс после завершения работы метода
	c.count++           // Инкрементируем счетчик
}

func main() {
	// Создаем экземпляр счетчика
	counter := Counter{}

	// Создаем WaitGroup для ожидания завершения всех горутин
	var wg sync.WaitGroup

	// Запускаем несколько горутин для инкрементации счетчика
	for i := 0; i < 1000; i++ {
		wg.Add(1) // Увеличиваем счетчик WaitGroup перед запуском каждой горутины
		go func() {
			counter.Increment() // Инкрементируем счетчик
			wg.Done()           // Уменьшаем счетчик WaitGroup после завершения работы горутины
		}()
	}

	// Ожидаем завершения всех горутин
	wg.Wait()

	// Выводим итоговое значение счетчика
	fmt.Println("Final count:", counter.count)
}
